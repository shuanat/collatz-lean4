import Mathlib.Logic.Function.Iterate
import Mathlib.Data.Nat.Basic
import Mathlib.Algebra.Ring.Parity
import Mathlib.Data.Nat.ModEq
import Mathlib.Data.Finset.Basic
import Mathlib.Data.Finset.Card
import Mathlib.Tactic.IntervalCases
import Mathlib.Data.ZMod.Basic
import Mathlib.Data.Real.Basic

noncomputable section
open Classical

namespace Collatz.Stratified

open scoped Nat

-- —Å–ª–æ–∏ –ø—Ä–æ–æ–±—Ä–∞–∑–æ–≤
def S_n (n : ‚Ñï) : Set ‚Ñï :=
  { m : ‚Ñï | Odd m ‚àß ‚àÉ k : ‚Ñï, k ‚â• 1 ‚àß 3 * m + 1 = 2^k * n }

def S_n_star (n : ‚Ñï) : Set ‚Ñï :=
  { m : ‚Ñï | m ‚àà S_n n ‚àß ¬¨ (3 ‚à£ m) }

-- –ø—Ä–∏–º–µ—Ä –Ω–µ—Ç—Ä–∏–≤–∏–∞–ª—å–Ω–æ–π –ª–µ–º–º—ã –ø–æ –º–æ–¥ 3
lemma parity_constraint
    (n k : ‚Ñï) (hn_odd : Odd n) (hn_not_div3 : ¬¨ (3 ‚à£ n)) :
    (2^k * n) ‚â° 1 [MOD 3]
      ‚Üî ((n ‚â° 1 [MOD 3] ‚àß Even k) ‚à® (n ‚â° 2 [MOD 3] ‚àß Odd k)) := by
  -- –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ç–µ—Ö–Ω–∏–∫–∞: –ø–µ—Ä–µ–π—Ç–∏ –≤ ZMod 3,
  -- –≤—ã—á–∏—Å–ª–∏—Ç—å ((2 : ZMod 3)^k) –ø–æ —á—ë—Ç–Ω–æ—Å—Ç–∏ k, –∑–∞—Ç–µ–º –≤–µ—Ä–Ω—É—Ç—å Nat.ModEq.
  -- –°–º. Mathlib/Data/ZMod/Basic –∏ Mathlib/Data/Nat/ModEq
  sorry

-- –ü–æ–ª–Ω–∞—è —Å—Ç—Ä–∞—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ—á—ë—Ç–Ω—ã—Ö
theorem complete_stratification :
  { m : ‚Ñï | Odd m } = ‚ãÉ (n : ‚Ñï) (hn : Odd n ‚àß ¬¨ (3 ‚à£ n)), S_n n := by
  -- –æ–±—ã—á–Ω–æ: ‚äÜ –∏ ‚äá –æ—Ç–¥–µ–ª—å–Ω–æ, —á–µ—Ä–µ–∑ SetLike –∏ —á–ª–µ–Ω—Å—Ç–≤–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
  sorry

-- –†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –ø–æ –≤–µ—Ç–≤–ª–µ–Ω–∏—é (–∏—Å–∫–ª—é—á–∞–µ–º –∫—Ä–∞—Ç–Ω—ã–µ 3)
theorem branching_decomposition :
  { m : ‚Ñï | Odd m ‚àß ¬¨ (3 ‚à£ m) } =
    ‚ãÉ (n : ‚Ñï) (hn : Odd n ‚àß ¬¨ (3 ‚à£ n)), S_n_star n := by
  -- –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–µ–æ—Ä–µ–º–µ + —É–ø–∞–∫–æ–≤–∫–∞/—Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ ‚ü®_,_‚ü© –∏ Or.inl/Or.inr
  sorry

-- –õ–∏—Å—Ç—å—è (–∫—Ä–∞—Ç–Ω—ã–µ 3) –Ω–µ –∏–º–µ—é—Ç –ø—Ä–æ–æ–±—Ä–∞–∑–æ–≤ –≤ –Ω–∞—à–µ–π –≤–µ—Ç–∫–µ
theorem leaves_no_preimages (m : ‚Ñï) (hm_div3 : 3 ‚à£ m) :
  S_n m = ‚àÖ := by
  -- –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é S_n: 3 ‚à£ m ‚áí 3 ‚à£ (3*m + 1 - 1) ‚áí –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ, –æ—Ñ–æ—Ä–º–ª—è–µ–º —á–µ—Ä–µ–∑ Nat.ModEq/–¥–µ–ª–∏–º–æ—Å—Ç—å
  sorry

-- –ü—Ä–∏–º–µ—Ä —à–∞–±–ª–æ–Ω–∞: —Ä–∞–∑–±–æ—Ä –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ –º–æ–¥—É–ª—é 3
lemma mod3_cases (n : ‚Ñï) :
  (n ‚â° 0 [MOD 3]) ‚à® (n ‚â° 1 [MOD 3]) ‚à® (n ‚â° 2 [MOD 3]) := by
  -- –ü—Ä–æ—Å—Ç–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ —á–µ—Ä–µ–∑ —Å–≤–æ–π—Å—Ç–≤–∞ –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∏
  sorry

-- –®–∞–±–ª–æ–Ω: 3*x + 1 ‚â° 1 [MOD 3]
lemma three_mul_add_one_mod3 (x : ‚Ñï) : 3 * x + 1 ‚â° 1 [MOD 3] := by
  -- 3 ‚à£ 3*x
  have h : (3 : ‚Ñï) ‚à£ 3 * x := Nat.dvd_mul_right 3 x
  -- –∏–∑ 3 ‚à£ 3x –ø–æ–ª—É—á–∞–µ–º 3x ‚â° 0 [MOD 3], –¥–æ–±–∞–≤–ª—è–µ–º 1 –ø–æ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
  -- –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –ª–µ–º–º–∞–º–∏ –∏–∑ Nat.ModEq (add_right)
  sorry

-- –®–∞–±–ª–æ–Ω –¥–ª—è –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ (–∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏) ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è
lemma density_template (N : ‚Ñï) (hN : 0 < N) :
  (( (Finset.range N).filter (fun m => Odd m ‚àß ¬¨ (3 ‚à£ m)) ).card : ‚Ñù) / (N : ‚Ñù)
    = (1/2 : ‚Ñù) + (0 : ‚Ñù) := by
  -- –ø—Ä–∏–º–µ—Ä—ã: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å card, –∑–∞—Ç–µ–º –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ ‚Ñù
  -- –≤ —Ä–µ–∞–ª—å–Ω–æ–º –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–µ: Asymptotics =O[ùìù‚àû] (1/N) –∏ —Ç.–¥.
  -- —Å–º. Analysis/Asymptotics
  sorry

end Collatz.Stratified
